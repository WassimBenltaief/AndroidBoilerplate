apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
apply plugin: 'com.github.triplet.play'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.squareup.sqldelight'
//apply plugin: 'io.fabric'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'


    defaultConfig {
        applicationId 'com.wassim.androidmvpbase'
        minSdkVersion 16
        targetSdkVersion 24
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        versionCode 1
        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName '1.0.0'
    }

    signingConfigs {
        // You must set up an environment var before release signing
        // Run: export APP_KEY={password}
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'alias'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warningsAsErrors true
        abortOnError false

        disable 'GoogleAppIndexingWarning' // App does not have deep linking.
        disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK.
    }
}

play {
    //serviceAccountEmail = 'your-service-account-email'
    //pk12File = file('key.p12')
    // By default publishes to Alpha channel
    //track = 'alpha'
}

dependencies {
    //Support Lib
    final supportLibsVer = '24.2.1'

    //Dagger
    final daggerVer = '2.4'
    final javaxVer = '10.0-b28'
    final javaPoet = '1.7.0'

    //RxJava
    final rxJavaVer = '1.1.5'
    final rxAndroidVer = '1.2.0'

    //Rest
    final okHttpVer = '3.3.1'
    final retrofitVer = '2.1.0'
    final gsonVer = '2.6.2'

    //Database
    final sqlBriteVer = '0.7.0'
    final autoValueParVer = '0.2.3-rc2'

    //Image-side
    final glideVer = '3.7.0'
    final glideOkHttpIntegration = '1.4.0@aar'

    //UI
    final butterKnifeVer = '8.0.1'

    //Other
    final permissionsDispatcherVer = '2.1.3'
    final eventBusVer = '3.0.0'

    //Developer
    final stethoVer = '1.3.1'
    final leakCanaryVer = '1.4-beta2'
    final timberVer = '4.1.2'

    //tests
    final junitVer = '4.12'
    final mockitoVer = '1.10.19'
    final dexMakerVer = '1.4'
    final robolectricVer = '3.0'
    final hamcrestVer = '1.3'
    final espressoVer = '2.2.1'
    final ruunerVer = '0.4'

    //Support Lib
    compile "com.android.support:appcompat-v7:$supportLibsVer"
    compile "com.android.support:support-v4:$supportLibsVer"
    compile "com.android.support:support-v13:$supportLibsVer"
    def supportAnnotations = "com.android.support:support-annotations:$supportLibsVer"
    compile supportAnnotations
    compile "com.android.support:recyclerview-v7:$supportLibsVer"
    compile "com.android.support:cardview-v7:$supportLibsVer"
    compile "com.android.support:design:$supportLibsVer"

    // Dagger
    apt "com.squareup:javapoet:$javaPoet"
    compile "com.google.dagger:dagger:$daggerVer"
    provided "org.glassfish:javax.annotation:$javaxVer"
    def daggerCompiler = "com.google.dagger:dagger-compiler:$daggerVer"
    apt daggerCompiler
    testApt daggerCompiler
    androidTestApt daggerCompiler

    // Rx
    compile "io.reactivex:rxjava:$rxJavaVer"
    compile "io.reactivex:rxandroid:$rxAndroidVer"

    // Rest
    compile "com.squareup.okhttp3:okhttp:$okHttpVer"
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVer"
    compile "com.squareup.retrofit2:retrofit:$retrofitVer"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVer"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVer"
    compile "com.google.code.gson:gson:$gsonVer"

    // Database
    compile "com.squareup.sqlbrite:sqlbrite:$sqlBriteVer"
    apt "com.ryanharter.auto.value:auto-value-parcel:$autoValueParVer"
    provided "com.ryanharter.auto.value:auto-value-parcel:$autoValueParVer"

    // Image Loader
    compile "com.github.bumptech.glide:glide:$glideVer"
    compile "com.github.bumptech.glide:okhttp-integration:$glideOkHttpIntegration"
    compile 'com.squareup.picasso:picasso:2.5.2'

    // UI
    compile "com.jakewharton:butterknife:$butterKnifeVer"
    apt "com.jakewharton:butterknife-compiler:$butterKnifeVer"

    // Other
    compile "com.github.hotchemi:permissionsdispatcher:$permissionsDispatcherVer"
    apt "com.github.hotchemi:permissionsdispatcher-processor:$permissionsDispatcherVer"
    compile "org.greenrobot:eventbus:$eventBusVer"

    // Performance & Debug
    compile "com.facebook.stetho:stetho:$stethoVer"
    compile "com.facebook.stetho:stetho-okhttp3:$stethoVer"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVer"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVer"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVer"
    compile "com.jakewharton.timber:timber:$timberVer"

    // Tests
    def jUnit = "junit:junit:$junitVer"
    def mockito = "org.mockito:mockito-core:$mockitoVer"
    def dexmaker = "com.crittercism.dexmaker:dexmaker:$dexMakerVer"
    def dexmakerDx = "com.crittercism.dexmaker:dexmaker:$dexMakerVer"
    def dexmakerMockito = "com.crittercism.dexmaker:dexmaker-mockito:$dexMakerVer"
    def robolectric = "org.robolectric:robolectric:$robolectricVer"
    def hamcrestCore = "org.hamcrest:hamcrest-core:$hamcrestVer"
    def hamcrestLib = "org.hamcrest:hamcrest-library:$hamcrestVer"
    def hamcrestIntegration = "org.hamcrest:hamcrest-integration:$hamcrestVer"
    def espressoContrib = "com.android.support.test.espresso:espresso-contrib:$espressoVer"
    def espressoCore = "com.android.support.test.espresso:espresso-core:$espressoVer"
    def runner = "com.android.support.test:runner:$ruunerVer"
    def rule = "com.android.support.test:rules:$ruunerVer"

    testCompile jUnit
    testCompile mockito
    testCompile robolectric
    testCompile hamcrestLib
    testCompile hamcrestIntegration

    androidTestCompile jUnit
    androidTestCompile mockito
    androidTestCompile dexmaker
    androidTestCompile dexmakerDx
    androidTestCompile dexmakerMockito
    androidTestCompile supportAnnotations
    androidTestCompile espressoCore
    androidTestCompile runner
    androidTestCompile rule
    androidTestCompile(espressoContrib) {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}